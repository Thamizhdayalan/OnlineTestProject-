//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineTestProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class OnlineTestProjectEntities : DbContext
    {
        public OnlineTestProjectEntities()
            : base("name=OnlineTestProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Question> Questions { get; set; }
        public DbSet<TestTable> TestTables { get; set; }
        public DbSet<UserInfo> UserInfoes { get; set; }
        public DbSet<AdminInfo> AdminInfoes { get; set; }
        public DbSet<Subjects> Subjects1 { get; set; }
        public DbSet<Option> Options { get; set; }
    
        public virtual ObjectResult<Adminlogin_Result> Adminlogin(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Adminlogin_Result>("Adminlogin", emailParameter, passwordParameter);
        }
    
        public virtual int storequestions(string questiontext)
        {
            var questiontextParameter = questiontext != null ?
                new ObjectParameter("questiontext", questiontext) :
                new ObjectParameter("questiontext", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storequestions", questiontextParameter);
        }
    
        public virtual int storequestions1(string questiontext, string subjects)
        {
            var questiontextParameter = questiontext != null ?
                new ObjectParameter("questiontext", questiontext) :
                new ObjectParameter("questiontext", typeof(string));
    
            var subjectsParameter = subjects != null ?
                new ObjectParameter("Subjects", subjects) :
                new ObjectParameter("Subjects", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storequestions1", questiontextParameter, subjectsParameter);
        }
    
        public virtual int storequestions2(string questiontext, string subjects)
        {
            var questiontextParameter = questiontext != null ?
                new ObjectParameter("questiontext", questiontext) :
                new ObjectParameter("questiontext", typeof(string));
    
            var subjectsParameter = subjects != null ?
                new ObjectParameter("Subjects", subjects) :
                new ObjectParameter("Subjects", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storequestions2", questiontextParameter, subjectsParameter);
        }
    
        public virtual int savequestions(string questiontext, string subject)
        {
            var questiontextParameter = questiontext != null ?
                new ObjectParameter("questiontext", questiontext) :
                new ObjectParameter("questiontext", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("savequestions", questiontextParameter, subjectParameter);
        }
    
        public virtual int storesubjects(string subject)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storesubjects", subjectParameter);
        }
    
        public virtual ObjectResult<showsubjects_Result> showsubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showsubjects_Result>("showsubjects");
        }
    
        public virtual int DeleteSubject(Nullable<int> subjectid)
        {
            var subjectidParameter = subjectid.HasValue ?
                new ObjectParameter("subjectid", subjectid) :
                new ObjectParameter("subjectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubject", subjectidParameter);
        }
    
        public virtual int StoreOptions(Nullable<int> questionId, string optionIndex, string optionText, Nullable<bool> iscorrect)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var optionIndexParameter = optionIndex != null ?
                new ObjectParameter("optionIndex", optionIndex) :
                new ObjectParameter("optionIndex", typeof(string));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("OptionText", optionText) :
                new ObjectParameter("OptionText", typeof(string));
    
            var iscorrectParameter = iscorrect.HasValue ?
                new ObjectParameter("iscorrect", iscorrect) :
                new ObjectParameter("iscorrect", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StoreOptions", questionIdParameter, optionIndexParameter, optionTextParameter, iscorrectParameter);
        }
    }
}
